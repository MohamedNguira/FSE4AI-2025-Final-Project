name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Lint and Code Quality Check
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Run Black (Code Formatter Check)
        run: black --check app.py || true

      - name: Run Flake8 (Linter)
        run: flake8 app.py --max-line-length=120 --ignore=E501,W503 || true

  # Test the application
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Create static directory
        run: mkdir -p static

      - name: Run tests
        run: pytest tests/ -v || echo "No tests found, skipping..."

      - name: Test app imports
        run: python -c "from app import app; print('App imported successfully')"

  # Build and test Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: fse4ai-image-classifier:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker build -t fse4ai-test .
          docker run -d -p 8000:8000 --name test-container fse4ai-test
          sleep 20
          curl -f http://localhost:8000/ || exit 1
          docker stop test-container
          docker rm test-container

  # Optional: Deploy or push to registry (commented out)
  # deploy:
  #   name: Deploy Application
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deploy to production
  #       run: echo "Add deployment steps here"
